<?php

/**
 * @file
 * An alternative to the "Update status" module that checks for available
 * updates of Drupal core and any installed contributed modules and themes
 * in a past Drupal 6 End-of-Life world.
 */

/**
 * URL to check for updates, if a given project doesn't define its own.
 *
 * The Drupal.org status update URL is:
 *
 *   http://updates.drupal.org/release-history
 *
 */
define('MYDROPWIZARD_PROJECT_URL', 'https://updates.mydropwizard.com/files/update/v1');


/**
 * URL to post statistical information.
 */
define('MYDROPWIZARD_STATISTICS_URL', 'https://updates.mydropwizard.com/update/statistics/v1');

// These are internally used constants for this code, do not modify.

/**
 * Project is missing security update(s).
 */
define('UPDATE_NOT_SECURE', 1);

/**
 * Current release has been unpublished and is no longer available.
 */
define('UPDATE_REVOKED', 2);

/**
 * Current release is no longer supported by the project maintainer.
 */
define('UPDATE_NOT_SUPPORTED', 3);

/**
 * Project has a new release available, but it is not a security release.
 */
define('UPDATE_NOT_CURRENT', 4);

/**
 * Project is up to date.
 */
define('UPDATE_CURRENT', 5);

/**
 * Project is both insecure and not supported.
 */
define('UPDATE_NOT_SECURE_AND_NOT_SUPPORTED', 6);

/**
 * Project's status cannot be checked.
 */
define('UPDATE_NOT_CHECKED', -1);

/**
 * No available update data was found for project.
 */
define('UPDATE_UNKNOWN', -2);

/**
 * There was a failure fetching available update data for this project.
 */
define('UPDATE_NOT_FETCHED', -3);

/**
 * Maximum number of attempts to fetch available update data from a given host.
 */
define('UPDATE_MAX_FETCH_ATTEMPTS', 2);

/**
 * Implementation of hook_help().
 */
function mydropwizard_help($path, $arg) {
  switch ($path) {
    case 'admin/reports/updates':
      $output = '<p>'. t('Here you can find information about available updates for your installed modules and themes. Note that each module or theme is part of a "project", which may or may not have the same name, and might include multiple modules or themes within it.') .'</p>';
      $output .= '<p>'. t('To extend the functionality or to change the look of your site, a number of contributed <a href="@modules">modules</a> and <a href="@themes">themes</a> are available.', array('@modules' => 'http://drupal.org/project/modules', '@themes' => 'http://drupal.org/project/themes')) .'</p>';
      return $output;
    case 'admin/build/themes':
    case 'admin/build/modules':
      include_once './includes/install.inc';
      $status = mydropwizard_requirements('runtime');
      foreach (array('core', 'contrib') as $report_type) {
        $type = 'mydropwizard_'. $report_type;
        if (isset($status[$type]['severity'])) {
          if ($status[$type]['severity'] == REQUIREMENT_ERROR) {
            drupal_set_message($status[$type]['description'], 'error');
          }
          elseif ($status[$type]['severity'] == REQUIREMENT_WARNING) {
            drupal_set_message($status[$type]['description'], 'warning');
          }
        }
      }
      return '<p>'. t('See the <a href="@available_updates">available updates</a> page for information on installed modules and themes with new versions released.', array('@available_updates' => url('admin/reports/updates'))) .'</p>';

    case 'admin/reports/updates/settings':
    case 'admin/reports/status':
      // These two pages don't need additional nagging.
      break;

    case 'admin/help#mydropwizard':
      $output = '<p>'. t("The myDropWizard module periodically checks for new versions of your site's software (including contributed modules and themes), and alerts you to available updates.") .'</p>';
      $output .= '<p>'. t('The <a href="@update-report">report of available updates</a> will alert you when new releases are available for download. You may configure options for update checking frequency and notifications at the <a href="@update-settings">Update status module settings page</a>.', array('@update-report' => url('admin/reports/updates'), '@update-settings' => url('admin/reports/updates/settings'))) .'</p>';
      return $output;

    default:
      // Otherwise, if we're on *any* admin page and there's a security
      // update missing, print an error message about it.
      if (arg(0) == 'admin' && strpos($path, '#') === FALSE
          && user_access('administer site configuration')) {
        include_once './includes/install.inc';
        $status = mydropwizard_requirements('runtime');
        foreach (array('self', 'core', 'contrib') as $report_type) {
          $type = 'mydropwizard_'. $report_type;
          if (isset($status[$type])
              && isset($status[$type]['reason'])
              && $status[$type]['reason'] === UPDATE_NOT_SECURE) {
            drupal_set_message($status[$type]['description'], 'error');
          }
        }
      }

  }
}

/**
 * Implementation of hook_menu().
 */
function mydropwizard_menu() {
  $items = array();

  $items['admin/reports/updates'] = array(
    'title' => 'Available updates',
    'description' => 'Get a status report about available updates for your installed modules and themes.',
    'page callback' => 'mydropwizard_status',
    'access arguments' => array('administer site configuration'),
    'file' => 'mydropwizard.report.inc',
    'weight' => 10,
  );
  $items['admin/reports/updates/list'] = array(
    'title' => 'List',
    'page callback' => 'mydropwizard_status',
    'access arguments' => array('administer site configuration'),
    'file' => 'mydropwizard.report.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/reports/updates/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mydropwizard_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'mydropwizard.settings.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/reports/updates/check'] = array(
    'title' => 'Manual update check',
    'page callback' => 'mydropwizard_manual_status',
    'access arguments' => array('administer site configuration'),
    'file' => 'mydropwizard.fetch.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function mydropwizard_menu_alter(&$items) {
  // Support for the Acquia Connector.
  if ($items['admin/reports/updates/check']['page callback'] == 'acquia_agent_manual_status') {
    $items['admin/reports/updates/check']['page callback'] = 'mydropwizard_acquia_agent_manual_status';
  }
}

/**
 * Implementation of the hook_theme() registry.
 */
function mydropwizard_theme() {
  return array(
    'mydropwizard_settings' => array(
      'arguments' => array('form' => NULL),
    ),
    'mydropwizard_report' => array(
      'arguments' => array('data' => NULL),
    ),
    'mydropwizard_version' => array(
      'arguments' => array('version' => NULL, 'tag' => NULL, 'class' => NULL),
    ),
  );
}

/**
 * Implementation of hook_theme_registry_alter().
 */
function mydropwizard_theme_registry_alter(&$registry) {
  if (isset($registry['status_report']) && $registry['status_report']['function'] == 'theme_status_report') {
    $registry['status_report']['function'] = 'mydropwizard_theme_status_report';
  }
}

/**
 * Implementation of hook_requirements().
 *
 * @return
 *   An array describing the status of the site regarding available updates.
 *   If there is no update data, only one record will be returned, indicating
 *   that the status of core can't be determined. If data is available, there
 *   will be two records: one for core, and another for all of contrib
 *   (assuming there are any contributed modules or themes enabled on the
 *   site). In addition to the fields expected by hook_requirements ('value',
 *   'severity', and optionally 'description'), this array will contain a
 *   'reason' attribute, which is an integer constant to indicate why the
 *   given status is being returned (UPDATE_NOT_SECURE, UPDATE_NOT_CURRENT, or
 *   UPDATE_UNKNOWN). This is used for generating the appropriate e-mail
 *   notification messages during mydropwizard_cron(), and might be useful for other
 *   modules that invoke mydropwizard_requirements() to find out if the site is up
 *   to date or not.
 *
 * @see _mydropwizard_message_text()
 * @see _mydropwizard_cron_notify()
 */
function mydropwizard_requirements($phase) {
  if ($phase == 'runtime') {
    if ($available = mydropwizard_get_available(FALSE)) {
      module_load_include('inc', 'mydropwizard', 'mydropwizard.compare');
      $data = mydropwizard_calculate_project_data($available);
      // First, populate the requirements for core:
      $requirements['mydropwizard_core'] = _mydropwizard_requirement_check($data['drupal'], 'core');
      // We don't want to check drupal a second time.
      unset($data['drupal']);
      if (!empty($data)) {
        // Now, sort our $data array based on each project's status. The
        // status constants are numbered in the right order of precedence, so
        // we just need to make sure the projects are sorted in ascending
        // order of status, and we can look at the first project we find.
        uasort($data, '_mydropwizard_project_status_sort');
        $first_project = reset($data);
        $requirements['mydropwizard_contrib'] = _mydropwizard_requirement_check($first_project, 'contrib');
      }
    }
    else {
      $requirements['mydropwizard_core']['title'] = t('Drupal core update status');
      $requirements['mydropwizard_core']['value'] = t('No update data available');
      $requirements['mydropwizard_core']['severity'] = REQUIREMENT_ERROR;
      $requirements['mydropwizard_core']['reason'] = UPDATE_UNKNOWN;
      $requirements['mydropwizard_core']['description'] = _mydropwizard_no_data();
    }

    if (module_exists('update')) {
      $requirements['mydropwizard_conflict']['title'] = t('Unsupported "Update status" module is installed.');
      $requirements['mydropwizard_conflict']['value'] = t('Conflict');
      $requirements['mydropwizard_conflict']['severity'] = REQUIREMENT_ERROR;
      $requirements['mydropwizard_conflict']['description'] = t('The unsupported "Update status" module is installed - it gives inaccurate information about security updates. Please <a href="!url">disable it on the modules page</a>.', array('!url' => url('admin/build/modules')));
    }

    // Notify the user that they have to update.
    if (variable_get('mydropwizard_update_status', 'OK') == 'UPDATE') {
      $requirements['mydropwizard_self']['title'] = t('myDropWizard module');
      $requirements['mydropwizard_self']['value'] = t('Out of date');
      $requirements['mydropwizard_self']['severity'] = REQUIREMENT_ERROR;
      $requirements['mydropwizard_core']['reason'] = UPDATE_NOT_SECURE;
      $requirements['mydropwizard_self']['description'] = _mydropwizard_needs_update();
    }

    return $requirements;
  }
}

/**
 * Replacement for the core theme_system_report() theme function.
 */
function mydropwizard_theme_status_report($requirements) {
  module_load_include('inc', 'system', 'system.admin');

  // Remove the core message about installing the update module.
  foreach ($requirements as $index => $requirement) {
    if ($requirement['title'] == t('Update notifications')) {
      unset($requirements[$index]);
    }
  }

  return theme_status_report($requirements);
}

/**
 * Private helper method to fill in the requirements array.
 *
 * This is shared for both core and contrib to generate the right elements in
 * the array for hook_requirements().
 *
 * @param $project
 *  Array of information about the project we're testing as returned by
 *  mydropwizard_calculate_project_data().
 * @param $type
 *  What kind of project is this ('core' or 'contrib').
 *
 * @return
 *  An array to be included in the nested $requirements array.
 *
 * @see hook_requirements()
 * @see mydropwizard_requirements()
 * @see mydropwizard_calculate_project_data()
 */
function _mydropwizard_requirement_check($project, $type) {
  $requirement = array();
  if ($type == 'core') {
    $requirement['title'] = t('Drupal core update status');
  }
  else {
    $requirement['title'] = t('Module and theme update status');
  }
  $status = $project['status'];
  // Treat both not secure and not supported, as the same as not secure
  // for our basic hook_requirements() check.
  if ($status == UPDATE_NOT_SECURE_AND_NOT_SUPPORTED) {
    $status = UPDATE_NOT_SECURE;
  }
  if ($status != UPDATE_CURRENT) {
    $requirement['reason'] = $status;
    $requirement['description'] = _mydropwizard_message_text($type, $status, TRUE);
    $requirement['severity'] = REQUIREMENT_ERROR;
  }
  switch ($status) {
    case UPDATE_NOT_SECURE:
      $requirement_label = t('Not secure!');
      break;
    case UPDATE_REVOKED:
      $requirement_label = t('Revoked!');
      break;
    case UPDATE_NOT_SUPPORTED:
      $requirement_label = t('Unsupported release');
      break;
    case UPDATE_NOT_CURRENT:
      $requirement_label = t('Out of date');
      $requirement['severity'] = REQUIREMENT_WARNING;
      break;
    case UPDATE_UNKNOWN:
    case UPDATE_NOT_CHECKED:
    case UPDATE_NOT_FETCHED:
      $requirement_label = isset($project['reason']) ? $project['reason'] : t('Can not determine status');
      $requirement['severity'] = REQUIREMENT_WARNING;
      break;
    default:
      $requirement_label = t('Up to date');
  }
  if ($status != UPDATE_CURRENT && $type == 'core' && isset($project['recommended'])) {
    $requirement_label .= ' '. t('(version @version available)', array('@version' => $project['recommended']));
  }
  $requirement['value'] = l($requirement_label, 'admin/reports/updates');
  return $requirement;
}

/**
 * Implementation of hook_cron().
 */
function mydropwizard_cron() {
  $frequency = variable_get('mydropwizard_check_frequency', 1);
  $interval = 60 * 60 * 24 * $frequency;
  // Cron should check for updates if there is no update data cached or if the
  // configured update interval has elapsed.
  if (!_mydropwizard_cache_get('mydropwizard_available_releases') || ((time() - variable_get('mydropwizard_last_check', 0)) > $interval)) {
    mydropwizard_refresh();
    _mydropwizard_cron_notify();
  }
}

/**
 * Implementation of hook_form_alter().
 *
 * Adds a submit handler to the system modules and themes forms, so that if a
 * site admin saves either form, we invalidate the cache of available updates.
 *
 * @see mydropwizard_invalidate_cache()
 */
function mydropwizard_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'system_modules' || $form_id == 'system_themes_form' ) {
    $form['#submit'][] = 'mydropwizard_invalidate_cache';
  }
}

/**
 * Prints a warning message when there is no data about available updates.
 */
function _mydropwizard_no_data() {
  $destination = drupal_get_destination();
  return t('No information is available about potential new releases for currently installed modules and themes. To check for updates, you may need to <a href="@run_cron">run cron</a> or you can <a href="@check_manually">check manually</a>. Please note that checking for available updates can take a long time, so please be patient.', array(
    '@run_cron' => url('admin/reports/status/run-cron', array('query' => $destination)),
    '@check_manually' => url('admin/reports/updates/check', array('query' => $destination)),
  ));
}

/**
 * Prints a warning message when the myDropWizard module is out of date.
 */
function _mydropwizard_needs_update($langcode = NULL) {
  return t('The myDropWizard module is out-of-date and needs to be updated in order to start getting update status information again. To ensure the security of your server, you should update immediately! Please see the <a href="!url">project page</a> to download the latest version.', array('!url' => 'https://www.drupal.org/project/mydropwizard'), $langcode);
}

/**
 * Internal helper to try to get the update information from the cache
 * if possible, and to refresh the cache when necessary.
 *
 * In addition to checking the cache lifetime, this function also ensures that
 * there are no .info files for enabled modules or themes that have a newer
 * modification timestamp than the last time we checked for available update
 * data. If any .info file was modified, it almost certainly means a new
 * version of something was installed. Without fresh available update data,
 * the logic in mydropwizard_calculate_project_data() will be wrong and produce
 * confusing, bogus results.
 *
 * @param $refresh
 *   Boolean to indicate if this method should refresh the cache automatically
 *   if there's no data.
 *
 * @see mydropwizard_refresh()
 * @see mydropwizard_get_projects()
 */
function mydropwizard_get_available($refresh = FALSE) {
  module_load_include('inc', 'mydropwizard', 'mydropwizard.compare');
  $available = array();

  // First, make sure that none of the .info files have a change time
  // newer than the last time we checked for available updates.
  $needs_refresh = FALSE;
  $last_check = variable_get('mydropwizard_last_check', 0);
  $projects = mydropwizard_get_projects();
  foreach ($projects as $key => $project) {
    if ($project['info']['_info_file_ctime'] > $last_check) {
      $needs_refresh = TRUE;
      break;
    }
  }
  if (!$needs_refresh && ($cache = _mydropwizard_cache_get('mydropwizard_available_releases')) && $cache->expire > time()) {
    $available = $cache->data;
  }
  elseif ($needs_refresh || $refresh) {
    // If we need to refresh due to a newer .info file, ignore the argument
    // and force the refresh (e.g., even for mydropwizard_requirements()) to prevent
    // bogus results.
    $available = mydropwizard_refresh();
  }
  return $available;
}

/**
 * Wrapper to load the include file and then refresh the release data.
 */
function mydropwizard_refresh() {
  module_load_include('inc', 'mydropwizard', 'mydropwizard.fetch');
  return _mydropwizard_refresh();
}

/**
 * Implementation of hook_mail().
 *
 * Constructs the email notification message when the site is out of date.
 *
 * @param $key
 *   Unique key to indicate what message to build, always 'status_notify'.
 * @param $message
 *   Reference to the message array being built.
 * @param $params
 *   Array of parameters to indicate what kind of text to include in the
 *   message body. This is a keyed array of message type ('core' or 'contrib')
 *   as the keys, and the status reason constant (UPDATE_NOT_SECURE, etc) for
 *   the values.
 *
 * @see drupal_mail()
 * @see _mydropwizard_cron_notify()
 * @see _mydropwizard_message_text()
 */
function mydropwizard_mail($key, &$message, $params) {
  $language = $message['language'];
  $langcode = $language->language;
  $message['subject'] .= t('New release(s) available for !site_name', array('!site_name' => variable_get('site_name', 'Drupal')), $langcode);
  foreach ($params as $msg_type => $msg_reason) {
    $message['body'][] = _mydropwizard_message_text($msg_type, $msg_reason, FALSE, $language);
  }
  $message['body'][] = t('See the available updates page for more information:', array(), $langcode) ."\n". url('admin/reports/updates', array('absolute' => TRUE, 'language' => $language));
}

/**
 * Helper function to return the appropriate message text when the site is out
 * of date or missing a security update.
 *
 * These error messages are shared by both mydropwizard_requirements() for the
 * site-wide status report at admin/reports/status and in the body of the
 * notification emails generated by mydropwizard_cron().
 *
 * @param $msg_type
 *   String to indicate what kind of message to generate. Can be either
 *   'self', 'core' or 'contrib'.
 * @param $msg_reason
 *   Integer constant specifying why message is generated.
 * @param $report_link
 *   Boolean that controls if a link to the updates report should be added.
 * @param $language
 *   An optional language object to use.
 * @return
 *   The properly translated error message for the given key.
 */
function _mydropwizard_message_text($msg_type, $msg_reason, $report_link = FALSE, $language = NULL) {
  $langcode = isset($language) ? $language->language : NULL;
  $text = '';
  switch ($msg_reason) {
    case UPDATE_NOT_SECURE:
      if ($msg_type == 'self') {
        $text = _mydropwizard_needs_update($langcode);
      }
      elseif ($msg_type == 'core') {
        $text = t('There is a security update available for your version of Drupal. To ensure the security of your server, you should update immediately!', array(), $langcode);
      }
      else {
        $text = t('There are security updates available for one or more of your modules or themes. To ensure the security of your server, you should update immediately!', array(), $langcode);
      }
      break;

    case UPDATE_REVOKED:
      if ($msg_type == 'core') {
        $text = t('Your version of Drupal has been revoked and is no longer available for download. Upgrading is strongly recommended!', array(), $langcode);
      }
      else {
        $text = t('The installed version of at least one of your modules or themes has been revoked and is no longer available for download. Upgrading or disabling is strongly recommended!', array(), $langcode);
      }
      break;

    case UPDATE_NOT_SUPPORTED:
      if ($msg_type == 'core') {
        $text = t('Your version of Drupal is no longer supported. Upgrading is strongly recommended!', array(), $langcode);
      }
      else {
        $text = t('The installed version of at least one of your modules or themes is no longer supported. Upgrading or disabling is strongly recommended! Please see the project homepage for more details.', array(), $langcode);
      }
      break;

    case UPDATE_NOT_CURRENT:
      if ($msg_type == 'core') {
        $text = t('There are updates available for your version of Drupal. To ensure the proper functioning of your site, you should update as soon as possible.', array(), $langcode);
      }
      else {
        $text = t('There are updates available for one or more of your modules or themes. To ensure the proper functioning of your site, you should update as soon as possible.', array(), $langcode);
      }
      break;

    case UPDATE_UNKNOWN:
    case UPDATE_NOT_CHECKED:
    case UPDATE_NOT_FETCHED:
      if ($msg_type == 'core') {
        $text = t('There was a problem determining the status of available updates for your version of Drupal.', array(), $langcode);
      }
      else {
        $text = t('There was a problem determining the status of available updates for one or more of your modules or themes.', array(), $langcode);
      }
      break;
  }

  if ($report_link) {
    $text .= ' '. t('See the <a href="@available_updates">available updates</a> page for more information.', array('@available_updates' => url('admin/reports/updates', array('language' => $language))), $langcode);
  }

  return $text;
}

/**
 * Private sort function to order projects based on their status.
 *
 * @see mydropwizard_requirements()
 * @see uasort()
 */
function _mydropwizard_project_status_sort($a, $b) {
  // The status constants are numerically in the right order, so we can
  // usually subtract the two to compare in the order we want. However,
  // negative status values should be treated as if they are huge, since we
  // always want them at the bottom of the list.
  $a_status = $a['status'] > 0 ? $a['status'] : (-10 * $a['status']);
  $b_status = $b['status'] > 0 ? $b['status'] : (-10 * $b['status']);
  return $a_status - $b_status;
}

/**
 * @defgroup mydropwizard_status_cache Private update status cache system
 * @{
 *
 * We specifically do NOT use the core cache API for saving the fetched data
 * about available updates. It is vitally important that this cache is only
 * cleared when we're populating it after successfully fetching new available
 * update data. Usage of the core cache API results in all sorts of potential
 * problems that would result in attempting to fetch available update data all
 * the time, including if a site has a "minimum cache lifetime" (which is both
 * a minimum and a maximum) defined, or if a site uses memcache or another
 * plug-able cache system that assumes volatile caches.
 *
 * Update module still uses the {cache_mydropwizard} table, but instead of using
 * cache_set(), cache_get(), and cache_clear_all(), there are private helper
 * functions that implement these same basic tasks but ensure that the cache
 * is not prematurely cleared, and that the data is always stored in the
 * database, even if memcache or another cache backend is in use.
 */

/**
 * Store data in the private update status cache table.
 *
 * Note: this function completely ignores the {cache_mydropwizard}.headers field
 * since that is meaningless for the kinds of data we're caching.
 *
 * @param $cid
 *   The cache ID to save the data with.
 * @param $data
 *   The data to store.
 * @param $expire
 *   One of the following values:
 *   - CACHE_PERMANENT: Indicates that the item should never be removed except
 *     by explicitly using _mydropwizard_cache_clear() or mydropwizard_invalidate_cache().
 *   - A Unix timestamp: Indicates that the item should be kept at least until
 *     the given time, after which it will be invalidated.
 */
function _mydropwizard_cache_set($cid, $data, $expire) {
  if (!db_table_exists('cache_mydropwizard')) {
    return;
  }
  $serialized = 0;
  if (is_object($data) || is_array($data)) {
    $data = serialize($data);
    $serialized = 1;
  }
  $created = time();
  db_query("UPDATE {cache_mydropwizard} SET data = %b, created = %d, expire = %d, serialized = %d WHERE cid = '%s'", $data, $created, $expire, $serialized, $cid);
  if (!db_affected_rows()) {
    @db_query("INSERT INTO {cache_mydropwizard} (cid, data, created, expire, serialized) VALUES ('%s', %b, %d, %d, %d)", $cid, $data, $created, $expire, $serialized);
  }
}

/**
 * Retrieve data from the private update status cache table.
 *
 * @param $cid
 *   The cache ID to retrieve.
 * @return
 *   The data for the given cache ID, or NULL if the ID was not found.
 */
function _mydropwizard_cache_get($cid) {
  if (!db_table_exists('cache_mydropwizard')) {
    return FALSE;
  }

  $cache = db_fetch_object(db_query("SELECT data, created, expire, serialized FROM {cache_mydropwizard} WHERE cid = '%s'", $cid));
  if (isset($cache->data)) {
    $cache->data = db_decode_blob($cache->data);
    if ($cache->serialized) {
      $cache->data = unserialize($cache->data);
    }
  }
  return $cache;
}

/**
 * Invalidates specific cached data relating to update status.
 *
 * @param $cid
 *   Optional cache ID of the record to clear from the private update module
 *   cache. If empty, all records will be cleared from the table.
 */
function _mydropwizard_cache_clear($cid = NULL) {
  if (!db_table_exists('cache_mydropwizard')) {
    return;
  }
  if (empty($cid)) {
    db_query("TRUNCATE TABLE {cache_mydropwizard}");
  }
  else {
    db_query("DELETE FROM {cache_mydropwizard} WHERE cid = '%s'", $cid);
  }
}

/**
 * Implementation of hook_flush_caches().
 *
 * Called from update.php (among others) to flush the caches.
 * Since we're running update.php, we are likely to install a new version of
 * something, in which case, we want to check for available update data again.
 * However, because we have our own caching system, we need to directly clear
 * the database table ourselves at this point and return nothing, for example,
 * on sites that use memcache where cache_clear_all() won't know how to purge
 * this data.
 *
 * However, we only want to do this from update.php, since otherwise, we'd
 * lose all the available update data on every cron run. So, we specifically
 * check if the site is in MAINTENANCE_MODE == 'mydropwizard' (which indicates
 * update.php is running, not update module... alas for overloaded names).
 */
function mydropwizard_flush_caches() {
  if (defined('MAINTENANCE_MODE') && MAINTENANCE_MODE == 'update') {
    _mydropwizard_cache_clear();
  }
  return array();
}

/**
 * Invalidates all cached data relating to update status.
 */
function mydropwizard_invalidate_cache() {
  _mydropwizard_cache_clear();
}

/**
 * @} End of "defgroup mydropwizard_status_cache".
 */
