<?php
// $Id: test_statements.test,v 1.1 2008/06/10 21:41:17 arto Exp $

class StatementTestCase extends DrupalTestCase {
  const REPOSITORY = 'simpletest';

  public function get_info() {
    return array(
      'name'  => t('Statements'),
      'desc'  => t('Inserts, queries and deletes RDF statements.'),
      'group' => t('RDF'),
    );
  }

  public function setup() {
    rdf_db_create_repository(self::REPOSITORY, array('dc:title' => t('Simpletest'), 'dc:description' => ''));
    rdf_use_repository(self::REPOSITORY);
    rdf_delete(NULL, NULL, NULL);
    rdf_insert_all($this->load_test_data());
    parent::setup();
  }

  public function teardown() {
    rdf_use_repository(NULL);
    rdf_db_delete_repository(self::REPOSITORY);
    parent::teardown();
  }

  public function test_count_statements() {
    $this->assertTrue(rdf_count() > 0, t('Test data was inserted'));
    $this->assertEqual(rdf_count(), count($this->load_test_data()), t('Expected statement count found'));
  }

  public function test_insert_statement() {
    rdf_insert('http://drupal.org/', dc::title, 'Drupal');
    $this->assertEqual(rdf_count(), count($this->load_test_data()) + 1, t('One statement was inserted'));
  }

  public function test_insert_duplicates() {
    rdf_insert_all($this->load_test_data());
    $this->assertEqual(rdf_count(), count($this->load_test_data()), t('No duplicate statements found'));
  }

  public function test_query_statements() {
    foreach ($this->load_test_data() as $stmt) {
      $this->assertEqual(call_user_func_array('rdf_count', $stmt), 1, t('Querying statement #@index', array('@index' => ++$counter)));
    }
  }

  public function test_delete_one_statement() {
    call_user_func_array('rdf_delete', reset($this->load_test_data()));
    $this->assertEqual(rdf_count(), count($this->load_test_data()) - 1, t('One statement was deleted'));
  }

  public function test_delete_all_statements() {
    rdf_delete(NULL, NULL, NULL);
    $this->assertEqual(rdf_count(), 0, t('All statements were deleted'));
  }

  private function load_test_data() {
    return rdf_denormalize(array(
      'http://drupal.org/project/rdf' => array(
        dc::title      => 'RDF API',
        dc::creator    => rdf_uriref('http://ar.to/#self'),
      ),
      'http://ar.to/#self' => array(
        foaf::name     => 'Arto Bendiken',
        foaf::homepage => rdf_uriref('http://bendiken.net/'),
      ),
    ));
  }
}
