<?php

function hobobiker_filter_filter_tips($delta, $format, $long = FALSE)
{
  switch ($delta) {
    case 0:
      $output = t('Insert Hobobiker images: [hobophoto:path=sites/default/files/somepic.jpg,orientation=portrait,caption=This is the caption]');
      if ($long) {
        $output .= t('The orientation parameter can be landscape (default) or portrait. The path should not have leading slash.');
      }
      return $output;
  }
}

// Implements hook_filter to provide photo stuff
function hobobiker_filter_filter($op, $delta = 0, $format = -1, $text = '')
{
  if ($op == 'list') {
    return array(0 => t('hobophoto filter'));
  }

  switch ($delta) {
    case 0:
      switch ($op) {
        case 'description':
          return t('Allows you to Insert Hobobiker images: [hobobiker-photo:id=230452326,size=s] or [hobobiker-photoset:id=72157594262419167,size=m]');

        case 'no cache':
          // TODO: only return true when testing the filter
          // return TRUE;
          return FALSE;

        case 'prepare':
          return $text;

        case 'process':
          // What we need here is [hobophoto:path="sites/default/files/something/fullsize.jpg",orientation=portrait|landscape,caption=some caption]
          $text = preg_replace_callback('/\[hobophoto:(.+?)\]/', 'hobobiker_filter_callback_photo', $text);
          return $text;
      }
      break;
  }
}

/**
 * Parse parameters to the filter from a format like:
 * id=26159919@N00, size=m,show = 9, class=something,style=float:left;border:1px
 * into an associative array with two sub-arrays. The first sub-array is
 * parameters for the request, the second are HTML attributes (class and style).
 */
function hobobiker_filter_split_config($string)
{
  $config = array("path" => "", "orientation"=>"landscape", "caption"=>"");
  $attribs = array();
  // Put each setting on its own line.
  $string = str_replace(',', "\n", $string);
  // Break them up around commas.
  preg_match_all('/([a-zA-Z]+)=([-@0-9a-zA-Z:;\/_. ]+)/', $string, $parts, PREG_SET_ORDER);
  foreach ($parts as $part) {
    // Normalize to lower case and remove extra spaces.
    $name = strtolower(trim($part[1]));
    $value = trim($part[2]);
    $config[$name] = $value;
  }
  return $config;
}

/**
 * Filter callback for a photo.
 */
function hobobiker_filter_callback_photo($matches)
{
  $config = hobobiker_filter_split_config($matches[1]);

  if (isset($config['path'])) {
    return theme('hobobiker_filter_photo', $config["path"], $config['orientation'], $config['caption']);
  }
  return '';
}

/**
 * Implements hook_theme().
 */
function hobobiker_filter_theme()
{
  return array(
    'hobobiker_filter_photo' => array(
      'arguments' => array('path' => NULL, 'orientation' => NULL, 'caption' => NULL),
    ),
  );
}


function theme_hobobiker_filter_photo($path, $orientation, $caption)
{
  $rel = "lightbox[group1][" . $caption . "]";
  // Todo: Make preset configurable
  $preset='240x180';
  if ($orientation == "portrait") {
    $preset= '180x240';
  }
  $markup = theme('imagecache', $preset, $path, $caption, $caption, ["rel" => $rel], FALSE);
  return $markup;

}
