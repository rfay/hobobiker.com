<?php

/**
 * @file
 * Install and uninstall functions as well as schema definition for the Mollom module.
 */

/**
 * Implements hook_requirements().
 *
 * @param $check
 *   (optional) Boolean whether to re-check the module's installation and
 *   configuration status. Defaults to TRUE, as this argument is not passed for
 *   hook_requirements() by default. Passing FALSE allows other run-time code
 *   to re-generate requirements error messages to be displayed on other pages
 *   than the site's system status report page.
 *
 * @see mollom_init()
 * @see mollom_admin_settings()
 * @see _mollom_status()
 */
function mollom_requirements($phase = 'runtime', $check = TRUE) {
  $requirements = array();
  if ($phase == 'runtime') {
    // This is invoked from both mollom_install() and mollom_init(); make sure
    // that mollom.module is loaded.
    drupal_load('module', 'mollom');

    $status = _mollom_status($check);
    $requirements['mollom'] = array(
      'title' => t('Mollom API keys'),
      'value' => t('Valid (public key: @publicKey)', array(
        '@publicKey' => variable_get('mollom_public_key', ''),
      )),
    );
    // Immediately return if everything is in order.
    if ($status['isVerified']) {
      return $requirements;
    }
    // If not, something is wrong; prepare the requirements entry and set
    // defaults for any yet unknown edge-cases.
    $requirements['mollom']['severity'] = REQUIREMENT_ERROR;
    // Append a link to the settings page to the error message on all pages,
    // except on the settings page itself. These error messages also need to be
    // shown on the settings page, since Mollom API keys can be entered later.
    $admin_message = '';
    if ($_GET['q'] != 'admin/settings/mollom/settings') {
      $admin_message = t('Visit the <a href="@settings-url">Mollom settings page</a> to configure your keys.', array(
        '@settings-url' => url('admin/settings/mollom/settings'),
      ));
    }
    // Generate an appropriate error message:
    // If testing mode is enabled, then the Testing API is most likely down,
    // since the testing client implementation automatically tries to recover
    // from stale/outdated API keys.
    if (variable_get('mollom_testing_mode', 0)) {
      $requirements['mollom']['value'] = t('Testing API not available');
      $requirements['mollom']['description'] = t('The Mollom Testing API is not available currently.');
    }
    // Missing API keys.
    elseif (!$status['isConfigured']) {
      $requirements['mollom']['value'] = t('Not configured');
      $requirements['mollom']['description'] = t('The Mollom API keys are not configured yet. !admin-message', array(
        '!admin-message' => $admin_message,
      ));
    }
    // Bad request: Invalid client system time: Too large offset from UTC.
    elseif ($status['response'] === Mollom::REQUEST_ERROR) {
      $requirements['mollom']['value'] = t('Client error');
      $requirements['mollom']['description'] = t('The server time of this site is incorrect. The time of the operating system is not synchronized with the Coordinated Universal Time (UTC), which prevents a successful authentication with Mollom. The maximum allowed offset is @minutes minutes. Please consult your hosting provider or server operator to correct the server time.', array(
        '@minutes' => Mollom::TIME_OFFSET_MAX / 60,
      ));
    }
    // Invalid API keys.
    elseif ($status['response'] === Mollom::AUTH_ERROR) {
      $requirements['mollom']['value'] = t('Invalid');
      $requirements['mollom']['description'] = t('The configured Mollom API keys are invalid. !admin-message', array(
        '!admin-message' => $admin_message,
      ));
    }
    // Communication error.
    elseif ($status['response'] === Mollom::NETWORK_ERROR) {
      $requirements['mollom']['value'] = t('Network error');
      $requirements['mollom']['description'] = t('The Mollom servers could not be contacted. Please make sure that your web server can make outgoing HTTP requests.');
    }
    // Server error.
    elseif ($status['response'] === Mollom::RESPONSE_ERROR) {
      $requirements['mollom']['value'] = t('Service error');
      $requirements['mollom']['description'] = t('The Mollom API keys could not be verified. Please try again later.');
    }
    // 404, etc.
    else {
      $requirements['mollom']['value'] = t('Unknown error');
      $requirements['mollom']['description'] = t('The Mollom servers could be contacted, but Mollom API keys could not be verified.');
    }
  }
  return $requirements;
}

/**
 * Implements hook_schema().
 */
function mollom_schema() {
  $schema['mollom'] = array(
    'description' => 'Stores Mollom responses for content.',
    'fields' => array(
      'entity' => array(
        'description' => 'Entity type of the content.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'id' => array(
        'description' => 'Unique entity ID of the content.',
        'type' => 'varchar',
        'length' => 36,
        'not null' => TRUE,
        'default' => '',
      ),
      'content_id' => array(
        'description' => 'Content ID returned by Mollom.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'captcha_id' => array(
        'description' => 'CAPTCHA ID returned by Mollom.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'form_id' => array(
        'description' => 'The form_id of the form being protected.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'changed' => array(
        'description' => 'Unix timestamp when the data was changed.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'moderate' => array(
        'description' => 'Whether the content needs to be moderated.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      // Server response columns are NULL by default, because any default value
      // would have an unintended meaning. Also, values are stored in individual
      // columns, so as to be able to join and filter/sort on these values for
      // improved content moderation.
      'spam_score' => array(
        'description' => 'Text analysis spam check result.',
        'type' => 'float',
        'size' => 'tiny',
        'not null' => FALSE,
      ),
      'spam_classification' => array(
        'description' => 'Text analysis final spam classification result.',
        'type' => 'varchar',
        'length' => 16,
        'not null' => FALSE,
      ),
      'solved' => array(
        'description' => 'Whether a CAPTCHA has been solved (1) or not (0).',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => FALSE,
      ),
      'quality_score' => array(
        'description' => 'Text analysis quality check result.',
        'type' => 'float',
        'size' => 'tiny',
        'not null' => FALSE,
      ),
      'profanity_score' => array(
        'description' => 'Text analysis profanity check result.',
        'type' => 'float',
        'size' => 'tiny',
        'not null' => FALSE,
      ),
      'reason' => array(
        'description' => 'A special reason for why a post was blocked.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'languages' => array(
        'description' => 'Text analysis language check result.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'flags_spam' => array(
        'description' => 'Count of spam feedback reports.',
        'type' => 'int',
        'size' => 'medium',
        'not null' => TRUE,
        'default' => 0,
      ),
      'flags_ham' => array(
        'description' => 'Count of ham feedback reports.',
        'type' => 'int',
        'size' => 'medium',
        'not null' => TRUE,
        'default' => 0,
       ),
      'flags_profanity' => array(
        'description' => 'Count of profanity feedback reports.',
        'type' => 'int',
        'size' => 'medium',
        'not null' => TRUE,
        'default' => 0,
      ),
      'flags_quality' => array(
        'description' => 'Count of low quality feedback reports.',
        'type' => 'int',
        'size' => 'medium',
        'not null' => TRUE,
        'default' => 0,
      ),
      'flags_unwanted' => array(
        'description' => 'Count of unwanted feedback reports.',
        'type' => 'int',
        'size' => 'medium',
        'not null' => TRUE,
        'default' => 0,
       ),
    ),
    'indexes' => array(
      'content_id' => array('content_id'),
      'captcha_id' => array('captcha_id'),
    ),
    'primary key' => array('entity', 'id'),
    'foreign keys' => array(
      'mollom_form_id' => array(
        'table' => 'mollom_form',
        'columns' => array(
          'form_id' => 'form_id',
        ),
      ),
    ),
  );

  $schema['mollom_form'] = array(
    'description' => 'Stores configuration of forms protected by Mollom.',
    'fields' => array(
      'form_id' => array(
        'description' => 'The protected form ID.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'mode' => array(
        'description' => 'Protection mode for the form.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'checks' => array(
        'description' => 'Text analyis checks to perform.',
        'type' => 'text',
        'not null' => FALSE,
        'serialize' => TRUE,
      ),
      'unsure' => array(
        'description' => 'Action to perform when text analysis is unsure.',
        'type' => 'varchar',
        'length' => 24,
        'not null' => TRUE,
        'default' => 'captcha',
      ),
      'discard' => array(
        'description' => 'Whether to discard (1) or retain (0) bad posts.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
      'moderation' => array(
        'description' => 'Whether to integrate with Mollom moderation.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'enabled_fields' => array(
        'description' => 'Form elements to analyze.',
        'type' => 'text',
        'not null' => FALSE,
        'serialize' => TRUE,
      ),
      'strictness' => array(
        'description' => 'Strictness of text analysis checks.',
        'type' => 'varchar',
        'length' => 8,
        'not null' => TRUE,
        'default' => 'normal',
      ),
      'module' => array(
        'description' => 'Module name owning the form.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('form_id'),
  );

  $schema['cache_mollom'] = drupal_get_schema_unprocessed('system', 'cache');
  $schema['cache_mollom']['description'] = 'Cache table for the Mollom module to store information for forms it protects.';

  return $schema;
}

/**
 * Implements hook_install().
 */
function mollom_install() {
  drupal_install_schema('mollom');

  // Point the user to Mollom's settings page after installation.
  $requirements = mollom_requirements('runtime', FALSE);
  // When running tests in D6, hook_install() seems to be invoked very (too?)
  // early, leading to a potentially predefined valid module configuration from
  // the parent site, therefore throwing a PHP notice here.
  if (isset($requirements['mollom']['description'])) {
    drupal_set_message($requirements['mollom']['description'], 'warning');
  }
}

/**
 * Implements hook_uninstall().
 */
function mollom_uninstall() {
  db_query("DELETE FROM {variable} WHERE name LIKE 'mollom_%'");
  drupal_uninstall_schema('mollom');
  cache_clear_all('mollom', 'cache', TRUE);
}

/**
 * An update function to add the language field.
 */
function mollom_update_1() {
  $ret = array();
  db_add_field($ret, 'mollom', 'languages', array(
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
    'default' => '',
  ));
  return $ret;
}

/**
 * Create the cache_mollom table.
 */
function mollom_update_2() {
  $ret = array();
  $schema = drupal_get_schema_unprocessed('system', 'cache');
  db_create_table($ret, 'cache_mollom', $schema);
  return $ret;
}

/**
 * Upgrade form protection storage.
 */
function mollom_update_3() {
  $ret = array();
  // Load hook_mollom_form_info() implementations for mollom_form_list().
  foreach (module_list(FALSE, FALSE) as $module) {
    drupal_load('module', $module);
  }
  drupal_load('module', 'mollom');

  foreach (mollom_form_list() as $form_id => $info) {
    $name = 'mollom_' . $form_id;
    $mode = variable_get($name, NULL);
    // $mode was stored as 1; convert to MOLLOM_MODE_ANALYSIS.
    if (isset($mode)) {
      variable_set($name, 2);
    }
  }
  return $ret;
}

/**
 * Add a reputation field to the mollom table.
 */
function mollom_update_4() {
  // Unused. Removed in mollom_update_6114().
  $ret = array();
  return $ret;
}

/**
 * Add the {mollom_form} table.
 */
function mollom_update_6105() {
  $ret = array();
  $schema = array(
    'fields' => array(
      'form_id' => array(
        'description' => 'The protected form ID.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'mode' => array(
        'description' => 'Protection mode for the form.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'enabled_fields' => array(
        'description' => 'Form elements to analyze.',
        'type' => 'text',
        'serialize' => TRUE,
      ),
      'module' => array(
        'description' => 'Module name owning the form.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('form_id'),
  );
  db_create_table($ret, 'mollom_form', $schema);

  // Migrate form configuration for enabled, supported modules.
  foreach (module_list(FALSE, FALSE) as $module) {
    drupal_load('module', $module);
  }
  drupal_load('module', 'mollom');

  $form_list = mollom_form_list();
  $result = db_query("SELECT name, value FROM {variable} WHERE name LIKE 'mollom_%%' AND name NOT IN ('mollom_servers', 'mollom_fallback', 'mollom_public_key', 'mollom_private_key')");
  while ($row = db_fetch_object($result)) {
    $form_id = substr($row->name, 7);
    $mode = unserialize($row->value);
    if (!empty($mode) && isset($form_list[$form_id])) {
      $info = $form_list[$form_id];
      $info += mollom_form_info($form_id, $info['module']);
      if ($mode == MOLLOM_MODE_ANALYSIS && isset($info['elements']) && is_array($info['elements'])) {
        $info['enabled_fields'] = array_keys($info['elements']);
      }
      else {
        $info['enabled_fields'] = array();
      }
      db_query("INSERT INTO {mollom_form} (form_id, mode, enabled_fields, module) VALUES ('%s', %d, '%s', '%s')", array($form_id, $mode, serialize($info['enabled_fields']), $info['module']));
    }
    variable_del($row->name);
  }
  return $ret;
}

/**
 * Add the {mollom}.form_id column.
 */
function mollom_update_6106() {
  $ret = array();
  // Add the 'entity' column.
  db_add_field($ret, 'mollom', 'entity', array(
    'description' => 'Entity type of the content.',
    'type' => 'varchar',
    'length' => 32,
    'not null' => TRUE,
    'default' => '',
  ));

  // Change the primary key to prevent duplicate key errors in the following
  // data conversions.
  db_drop_primary_key($ret, 'mollom');
  db_add_primary_key($ret, 'mollom', array('entity', 'did'));

  // Migrate existing node data.
  $ret[] = update_sql("UPDATE {mollom} SET entity = 'node' WHERE did LIKE 'node-%'");
  $ret[] = update_sql("UPDATE {mollom} SET did = SUBSTR(did, 6) WHERE entity = 'node'");
  // Migrate existing comment data.
  $ret[] = update_sql("UPDATE {mollom} SET entity = 'comment' WHERE did LIKE 'comment-%'");
  $ret[] = update_sql("UPDATE {mollom} SET did = SUBSTR(did, 9) WHERE entity = 'comment'");

  // Decrease the size of the 'did' column.
  // @todo We do not change the type to 'int' here to still support named
  //   identifiers. Reconsider this.
  db_change_field($ret, 'mollom', 'did', 'did', array(
    'description' => 'Unique entity ID of the content.',
    'type' => 'varchar',
    'length' => 32,
    'not null' => TRUE,
    'default' => '',
  ));

  return $ret;
}

/**
 * Disable the privacy policy link for existing sites by default.
 */
function mollom_update_6107() {
  $ret = array();
  variable_set('mollom_privacy_link', 0);
  $ret[] = array('success' => TRUE, 'query' => "Link to Mollom's privacy policy on forms protected via textual analysis has been disabled.");
  return $ret;
}

/**
 * Rename 'post with no checking' permission to 'bypass mollom protection'.
 */
function mollom_update_6108() {
  $ret = array();
  $ret[] = update_sql("UPDATE {permission} SET perm = REPLACE(perm, 'post with no checking', 'bypass mollom protection')");
  return $ret;
}

/**
 * Rename 'fields' column to 'enabled_fields'; previously introduced in mollom_update_6105().
 *
 * 'fields' is a reserved keyword in MySQL.
 */
function mollom_update_6109() {
  $ret = array();
  if (db_column_exists('mollom_form', 'fields')) {
    db_change_field($ret, 'mollom_form', 'fields', 'enabled_fields', array(
      'description' => 'Form elements to analyze.',
      'type' => 'text',
      'serialize' => TRUE,
    ));
  }
  return $ret;
}

/**
 * Automatically update the new 'mollom_status' variable.
 *
 * _mollom_status() was introduced in 6.x-1.11 to prevent Mollom from
 * interfering with forms when it is incorrectly configured. Sites updating from
 * previous versions should be correctly configured, so we just invoke it here.
 */
function mollom_update_6110() {
  $ret = array();
  drupal_load('module', 'mollom');
  _mollom_status(TRUE);
  return $ret;
}

/**
 * Fix enabled_fields array for CAPTCHA-only protected forms.
 *
 * mollom_update_6105() incorrectly stored enabled_fields values for forms
 * protected by CAPTCHAs only.
 */
function mollom_update_6111() {
  $ret = array();
  // @see update_sql()
  $sql = "UPDATE {mollom_form} SET enabled_fields = '%s' WHERE mode = %d";
  $result = db_query($sql, array(serialize(array()), 1));
  $ret[] = array('success' => $result !== FALSE, 'query' => check_plain($sql));
  return $ret;
}

/**
 * Add {mollom}.changed column to auto-flush expired entries.
 */
function mollom_update_6112() {
  $ret = array();
  if (!db_column_exists('mollom', 'changed')) {
    db_add_field($ret, 'mollom', 'changed', array(
      'description' => 'Unix timestamp when the data was changed.',
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
    ));
    db_query("UPDATE {mollom} SET changed = %d", array(time()));
  }
  return $ret;
}

/**
 * Replace {mollom_form}.data with {mollom_form}.checks.
 */
function mollom_update_6113() {
  $ret = array();
  // Add {mollom_form}.checks.
  if (!db_column_exists('mollom_form', 'checks')) {
    db_add_field($ret, 'mollom_form', 'checks', array(
      'description' => 'Text analyis checks to perform.',
      'type' => 'text',
      'not null' => FALSE,
      'serialize' => TRUE,
    ));
    // Default all checks to 'spam', including CAPTCHA-only rows, so spam
    // checking is enabled by default when switching the protection mode.
    // @see update_sql()
    $sql = "UPDATE {mollom_form} SET checks = '%s'";
    $result = db_query($sql, array(serialize(array('spam'))));
    $ret[] = array('success' => $result !== FALSE, 'query' => check_plain($sql));
  }
  // {mollom_form}.data did never exist in D6.

  return $ret;
}

/**
 * Clean up and complete server response columns in {mollom}.
 */
function mollom_update_6114() {
  $ret = array();
  // Remove 'reputation' column introduced in mollom_update_4(); unused.
  if (db_column_exists('mollom', 'reputation')) {
    db_drop_field($ret, 'mollom', 'reputation');
  }

  // Change {mollom}.quality from varchar into float.
  db_change_field($ret, 'mollom', 'quality', 'quality', array(
    'description' => 'Text analysis quality check result.',
    'type' => 'float',
    'size' => 'tiny',
    'not null' => FALSE,
  ));

  // Add {mollom}.spam.
  if (!db_column_exists('mollom', 'spam')) {
    db_add_field($ret, 'mollom', 'spam', array(
      'description' => 'Text analysis spam check result.',
      'type' => 'int',
      'size' => 'tiny',
      'not null' => FALSE,
    ));
    // Fill {mollom}.spam with approximate values based on {mollom}.quality.
    // Note that this is just to have some values. 'quality' and 'spam' are
    // completely unrelated otherwise.
    // MOLLOM_ANALYSIS_SPAM (2)
    $ret[] = update_sql("UPDATE {mollom} SET spam = 2 WHERE quality < 0.5");
    // MOLLOM_ANALYSIS_UNSURE (3)
    $ret[] = update_sql("UPDATE {mollom} SET spam = 3 WHERE quality = 0.5");
    // MOLLOM_ANALYSIS_HAM (1)
    $ret[] = update_sql("UPDATE {mollom} SET spam = 1 WHERE quality > 0.5");
  }

  // Addition of {mollom}.profanity deferred to mollom_update_6119().

  return $ret;
}

/**
 * Add {mollom}.form_id column to look up the originating form_id for an entity.
 */
function mollom_update_6115() {
  $ret = array();
  // All Mollom data record modifications have been removed from this update,
  // since mollom_update_6200() truncates the {mollom} table either way.

  if (!db_column_exists('mollom', 'form_id')) {
    db_add_field($ret, 'mollom', 'form_id', array(
      'description' => 'The form_id of the form being protected.',
      'type' => 'varchar',
      'length' => 255,
      'not null' => TRUE,
      'default' => '',
    ));
  }
  return $ret;
}

/**
 * Rename {mollom}.did to .id, and {mollom}.session to .session_id.
 */
function mollom_update_6116() {
  $ret = array();
  db_drop_primary_key($ret, 'mollom');
  if (!db_column_exists('mollom', 'id')) {
    db_change_field($ret, 'mollom', 'did', 'id', array(
      'description' => 'Unique entity ID of the content.',
      'type' => 'varchar',
      'length' => 32,
      'not null' => TRUE,
      'default' => '',
    ));
  }
  db_add_primary_key($ret, 'mollom', array('entity', 'id'));

  db_drop_index($ret, 'mollom', 'session');
  if (!db_column_exists('mollom', 'session_id')) {
    db_change_field($ret, 'mollom', 'session', 'session_id', array(
      'description' => 'Session hash returned by Mollom.',
      'type' => 'varchar',
      'length' => 255,
      'not null' => TRUE,
      'default' => '',
    ));
  }
  db_add_index($ret, 'mollom', 'session_id', array('session_id'));
  return $ret;
}

/**
 * Add {mollom_form}.discard and {mollom}.moderate columns.
 */
function mollom_update_6117() {
  $ret = array();
  if (!db_column_exists('mollom_form', 'discard')) {
    db_add_field($ret, 'mollom_form', 'discard', array(
      'description' => 'Whether to discard (1) or retain (0) bad posts.',
      'type' => 'int',
      'size' => 'tiny',
      'not null' => TRUE,
      'default' => 1,
    ));
  }
  return $ret;
}

/**
 * Remove the {mollom}.moderate column introduced in mollom_update_6117().
 */
function mollom_update_6118() {
  $ret = array();
  if (db_column_exists('mollom', 'moderate')) {
    db_drop_field($ret, 'mollom', 'moderate');
  }
  return $ret;
}

/**
 * Add {mollom}.profanity.
 */
function mollom_update_6119() {
  $ret = array();
  if (!db_column_exists('mollom', 'profanity')) {
    db_add_field($ret, 'mollom', 'profanity', array(
      'description' => 'Text analysis profanity check result.',
      'type' => 'float',
      'size' => 'tiny',
      'not null' => FALSE,
    ));
  }
  return $ret;
}

/**
 * Add {mollom_form}.strictness column.
 */
function mollom_update_6120() {
  $ret = array();
  if (!db_column_exists('mollom_form', 'strictness')) {
    db_add_field($ret, 'mollom_form', 'strictness', array(
      'description' => 'Strictness of text analysis checks.',
      'type' => 'varchar',
      'length' => 8,
      'not null' => TRUE,
      'default' => 'normal',
    ));
  }
  return $ret;
}

/**
 * Fix default value of {mollom_form}.strictness.
 */
function mollom_update_6121() {
  $ret = array();
  db_change_field($ret, 'mollom_form', 'strictness', 'strictness', array(
    'description' => 'Strictness of text analysis checks.',
    'type' => 'varchar',
    'length' => 8,
    'not null' => TRUE,
    'default' => 'normal',
  ));
  $ret[] = update_sql("UPDATE {mollom_form} SET strictness = 'normal' WHERE strictness = 'medium'");
  return $ret;
}

/**
 * Change {mollom}: Add 'spamResult', change 'spam', replace 'session_id' with 'contentId' and 'captchaId'.
 */
function mollom_update_6200() {
  $ret = array();

  variable_del('mollom_servers');

  if (db_column_exists('mollom', 'session_id')) {
    // Truncate table. Old session IDs cannot be migrated.
    $ret[] = update_sql("TRUNCATE TABLE {mollom}");
    // Remove 'session_id'.
    db_drop_index($ret, 'mollom', 'session_id');
    db_drop_field($ret, 'mollom', 'session_id');

    // Add 'contentId' and 'captchaId'.
    db_add_field($ret, 'mollom', 'contentId', array(
      'description' => 'Content ID returned by Mollom.',
      'type' => 'varchar',
      'length' => 128,
      'not null' => TRUE,
      'default' => '',
    ));
    db_add_field($ret, 'mollom', 'captchaId', array(
      'description' => 'CAPTCHA ID returned by Mollom.',
      'type' => 'varchar',
      'length' => 128,
      'not null' => TRUE,
      'default' => '',
    ));
    db_add_index($ret, 'mollom', 'contentId', array('contentId'));
    db_add_index($ret, 'mollom', 'captchaId', array('captchaId'));
  }
  if (!db_column_exists('mollom', 'spamClassification')) {
    // Add 'spamClassification'.
    db_add_field($ret, 'mollom', 'spamClassification', array(
      'description' => 'Text analysis final spam classification result.',
      'type' => 'varchar',
      'length' => 16,
      'not null' => FALSE,
    ));
    // Change 'spam' into 'spamScore' double.
    db_change_field($ret, 'mollom', 'spam', 'spamScore', array(
      'description' => 'Text analysis spam check result.',
      'type' => 'float',
      'size' => 'tiny',
      'not null' => FALSE,
    ));
  }
  if (!db_column_exists('mollom', 'profanityScore')) {
    // Change 'profanity' into 'profanityScore' double.
    db_change_field($ret, 'mollom', 'profanity', 'profanityScore', array(
      'description' => 'Text analysis profanity check result.',
      'type' => 'float',
      'size' => 'tiny',
      'not null' => FALSE,
    ));
  }
  if (!db_column_exists('mollom', 'qualityScore')) {
    // Change 'quality' into 'qualityScore' double.
    db_change_field($ret, 'mollom', 'quality', 'qualityScore', array(
      'description' => 'Text analysis quality check result.',
      'type' => 'float',
      'size' => 'tiny',
      'not null' => FALSE,
    ));
  }
  if (!db_column_exists('mollom', 'solved')) {
    // Add 'solved'.
    db_add_field($ret, 'mollom', 'solved', array(
      'description' => 'Whether a CAPTCHA has been solved (1) or not (0).',
      'type' => 'int',
      'size' => 'tiny',
      'not null' => FALSE,
    ));
  }
  if (!db_column_exists('mollom', 'reason')) {
    // Add 'reason'.
    db_add_field($ret, 'mollom', 'reason', array(
      'description' => 'A special reason for why a post was blocked.',
      'type' => 'varchar',
      'length' => 255,
      'not null' => TRUE,
      'default' => '',
    ));
  }
  return $ret;
}

/**
 * Add {mollom}.moderate column for tracking posts needing moderation.
 */
function mollom_update_6201() {
  $ret = array();
  if (!db_column_exists('mollom', 'moderate')) {
    db_add_field($ret, 'mollom', 'moderate', array(
      'description' => 'Whether the content needs to be moderated.',
      'type' => 'int',
      'size' => 'tiny',
      'not null' => TRUE,
      'default' => 0,
    ));
  }
  return $ret;
}

/**
 * Enlarge {mollom}.id to fit contentId and captchaId returned by Mollom.
 */
function mollom_update_6202() {
  $ret = array();
  db_change_field($ret, 'mollom', 'id', 'id', array(
    'description' => 'Unique entity ID of the content.',
    'type' => 'varchar',
    'length' => 36,
    'not null' => TRUE,
    'default' => '',
  ));
  return $ret;
}

/**
 * Add {mollom_form}.moderation column.
 */
function mollom_update_6203() {
  $ret = array();
  if (!db_column_exists('mollom_form', 'moderation')) {
    variable_del('mollom_moderation_integration');

    db_add_field($ret, 'mollom_form', 'moderation', array(
      'description' => 'Whether to integrate with Mollom moderation.',
      'type' => 'int',
      'size' => 'tiny',
      'not null' => TRUE,
      'default' => 0,
    ));
  }
  return $ret;
}

/**
 * Remove server list variables.
 */
function mollom_update_6204() {
  $ret = array();
  variable_del('mollom_servers');
  variable_del('mollom_test_servers');
  return $ret;
}

/**
 * Remove corrupted Mollom data records.
 *
 * Due to a bug in the Mollom moderation system integration code, contentIds of
 * existing Mollom data records might have been overwritten with the contentId
 * of a new post; i.e., corrupted. These records lead to invalid contentId
 * lookup results now. Since the original contentIds are no longer available,
 * the corrupted Mollom data records have to be deleted.
 *
 * @see http://drupal.org/node/1470326
 */
function mollom_update_6205() {
  $ret = array();
  // Find all Mollom data records with duplicate contentIds.
  $result = db_query('SELECT contentId FROM {mollom} GROUP BY contentId HAVING COUNT(contentId) > 1');
  while ($contentId = db_result($result)) {
    $ret[] = update_sql("DELETE FROM {mollom} WHERE contentId = '$contentId'");
  }
  return $ret;
}

/**
 * Add {mollom_form}.unsure field.
 */
function mollom_update_6206() {
  $ret = array();
  if (!db_column_exists('mollom_form', 'unsure')) {
    db_add_field($ret, 'mollom_form', 'unsure', array(
      'description' => 'Action to perform when text analysis is unsure.',
      'type' => 'varchar',
      'length' => 24,
      'not null' => TRUE,
      'default' => 'captcha',
    ));
  }
  return $ret;
}

/**
 * Remove 'mollom_status' variable (replaced by cache).
 */
function mollom_update_6207() {
  $ret = array();
  variable_del('mollom_status');
  return $ret;
}

/**
 * Remove obsolete 'mollom_moderation_redirect' setting.
 */
function mollom_update_6208() {
  $ret = array();
  variable_del('mollom_moderation_redirect');
  return $ret;
}

/**
 * Disable minimum log severity threshold for existing sites.
 */
function mollom_update_6209() {
  $ret = array();
  if (variable_get('mollom_log_minimum_severity', NULL) === NULL) {
    variable_set('mollom_log_minimum_severity', WATCHDOG_INFO);
  }
  return $ret;
}

/***
 * Add columns for "report as inapporpriate" counts.
 */
function mollom_update_6210() {
  $ret = array();
  if (!db_column_exists('mollom', 'flags_spam')) {
    db_add_field($ret, 'mollom', 'flags_spam', array(
      'description' => 'Count of spam feedback reports.',
      'type' => 'int',
      'size' => 'medium',
      'not null' => TRUE,
      'default' => 0,
    ));
  }
  if (!db_column_exists('mollom', 'flags_ham')) {
    db_add_field($ret, 'mollom', 'flags_ham', array(
      'description' => 'Count of ham feedback reports.',
      'type' => 'int',
      'size' => 'medium',
      'not null' => TRUE,
      'default' => 0,
    ));
  }
  if (!db_column_exists('mollom', 'flags_profanity')) {
    db_add_field($ret, 'mollom', 'flags_profanity', array(
      'description' => 'Count of profanity feedback reports.',
      'type' => 'int',
      'size' => 'medium',
      'not null' => TRUE,
      'default' => 0,
    ));
  }
  if (!db_column_exists('mollom', 'flags_quality')) {
    db_add_field($ret, 'mollom', 'flags_quality', array(
      'description' => 'Count of low quality feedback reports.',
      'type' => 'int',
      'size' => 'medium',
      'not null' => TRUE,
      'default' => 0,
    ));
  }
  if (!db_column_exists('mollom', 'flags_unwanted')) {
    db_add_field($ret, 'mollom', 'flags_unwanted', array(
      'description' => 'Count of unwanted feedback reports.',
      'type' => 'int',
      'size' => 'medium',
      'not null' => TRUE,
      'default' => 0,
    ));
  }
  return $ret;
}

/**
 * Set default variable values for advanced administration features.
 *
 * Note that some of these may have already been set in previous versions.
 */
function mollom_update_6211() {
  variable_set('mollom_log_minimum_severity', variable_get('mollom_log_minimum_severity', WATCHDOG_WARNING));
  variable_set('mollom_audio_captcha_enabled', variable_get('mollom_audio_captcha_enabled', 1));
  variable_set('mollom_connection_timeout', variable_get('mollom_connection_timeout', 3));
  variable_set('mollom_fba_enabled', variable_get('mollom_fba_enabled', 0));
  variable_set('mollom_fai_entity_types', variable_get('mollom_fai_entity_types', array('comment')));
  variable_set('mollom_fai_dialog', variable_get('mollom_fai_dialog', 'mollom'));
  return array();
}

/**
 * Change all mixedCase database columns and indexes to underscore separated.
 */
function mollom_update_6212() {
  $ret = array();
  db_drop_index($ret, 'mollom', 'contentId');
  db_drop_index($ret, 'mollom', 'captchaId');
  if (db_column_exists('mollom', 'contentId')) {
    db_change_field($ret, 'mollom', 'contentId', 'content_id', array(
      'description' => 'Content ID returned by Mollom.',
      'type' => 'varchar',
      'length' => 128,
      'not null' => TRUE,
      'default' => '',
    ));
  }
  if (db_column_exists('mollom', 'captchaId')) {
    db_change_field($ret, 'mollom', 'captchaId', 'captcha_id', array(
      'description' => 'CAPTCHA ID returned by Mollom.',
      'type' => 'varchar',
      'length' => 128,
    ));
  }
  if (db_column_exists('mollom', 'spamScore')) {
    db_change_field($ret, 'mollom', 'spamScore', 'spam_score', array(
      'description' => 'Text analysis spam check result.',
      'type' => 'float',
      'size' => 'tiny',
      'not null' => FALSE,
    ));
  }
  if (db_column_exists('mollom', 'spamClassification')) {
    db_change_field($ret, 'mollom', 'spamClassification', 'spam_classification', array(
      'description' => 'Test analysis final spam classification result.',
      'type' => 'varchar',
      'length' => 16,
    ));
  }
  if (db_column_exists('mollom', 'qualityScore')) {
    db_change_field($ret, 'mollom', 'qualityScore', 'quality_score', array(
      'description' => 'Text analysis quality check result.',
      'type' => 'float',
      'size' => 'tiny',
      'not null' => FALSE,
    ));
  }
  if (db_column_exists('mollom', 'profanityScore')) {
    db_change_field($ret, 'mollom', 'profanityScore', 'profanity_score', array(
      'description' => 'Text analysis profanity check result.',
      'type' => 'float',
      'size' => 'tiny',
      'not null' => FALSE,
    ));
  }
  db_add_index($ret, 'mollom', 'content_id', array('content_id'));
  db_add_index($ret, 'mollom', 'captcha_id', array('captcha_id'));
  return $ret;
}

/**
 * Restrict access to the Mollom Content Moderation Platform to current users.
 */
function mollom_update_6213() {
  $uses_cmp = FALSE;
  $result = db_query('SELECT moderation from {mollom_form}');
  if ($result !== FALSE) {
    while ($moderation = db_result($result)) {
      if (!empty($moderation)) {
        $uses_cmp = TRUE;
        break;
      }
    }
  }
  if ($uses_cmp) {
    variable_set('mollom_cmp_enabled',TRUE);
  }
  return array();
}


/**
 * Remove Mollom Content Moderation Platform variables.
 */
function mollom_update_6214() {
  variable_del('mollom_cmp_enabled');
  return array();
}
